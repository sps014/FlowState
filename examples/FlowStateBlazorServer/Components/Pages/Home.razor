@page "/"
@using FlowState.Components
@using FlowState.Models
@using System.Threading.Tasks
@using FlowState.Models.Events
@rendermode InteractiveServer	

<PageTitle>Home</PageTitle>


<button @onclick="SaveGraph">Save Graph</button>

<FlowCanvas Height="100vh" Width="100vw" Graph="graph" OnCanvasLoaded="OnLoaded">
 <BackgroundContent>
        <FlowBackground class="flow-grid-lines"/>
    </BackgroundContent>
    </FlowCanvas>



@code
{
    FlowGraph graph = new FlowGraph();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        graph.RegisterNode<InputNode>();
    }
    private NodeInfo? fromNodeInfo,toNodeInfo;

    private async Task OnLoaded()
    {

        graph.TypeCompatibiltyRegistry.Register<float>(typeof(int));
        //FlowNodeBase c= graph.Nodes.First();
        //Console.WriteLine($"Node count: {c.X},{c.Y}");
        fromNodeInfo=graph.CreateNode<InputNode>(0,0,[]);
        toNodeInfo = graph.CreateNode<InputNode>(200,200,[]);

        await Task.Delay(100);

        //var data = graph.Connect(fromNodeInfo.Id,toNodeInfo.Id,"Output","Input");
        //Console.WriteLine(data.Error);
        StateHasChanged();
    }


    private async Task SaveGraph()
    {
        var data = await graph.GetSerializableObjectAsync();
        Console.WriteLine(data);
    }
}

<style>
.flow-grid-lines
{
    background: #111827;
    background-image: 
    /* Main grid lines */
    linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px),
    /* Minor grid lines */
    linear-gradient(rgba(255,255,255,0.05) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255,255,255,0.05) 1px, transparent 1px);
  background-size: 
    100px 100px,
    100px 100px,
    20px 20px,
    20px 20px;
  background-position: 
    0 0,        /* Main grid */
    0 0,        /* Main grid */
    0 0,        /* Minor grid */
    0 0;        /* Minor grid */
}
</style>