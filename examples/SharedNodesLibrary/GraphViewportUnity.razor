@using FlowState.Components
@using FlowState.Models
@using System.Threading.Tasks
@using FlowState.Models.Events
@using Microsoft.JSInterop
@using SharedNodesLibrary
@using SharedNodesLibrary.UnityThemedNodes
@using System.Text.RegularExpressions
@using System.Diagnostics
@inject IJSRuntime Runtime

<GraphToolbar OnSave="SaveGraph" 
              OnClear="ClearGraph" 
              OnLoad="LoadGraph" 
              OnExecute="ExecuteGraph" 
              OnToggleReadOnly="ToggleReadOnly"
              OnUndo="Undo"
              OnRedo="Redo"
              IsReadOnly="isReadOnly" />

<FlowCanvas @ref="canvas" 
            Height="calc(100vh - 60px)" 
            Width="100vw" 
            Graph="graph" 
            IsReadOnly="isReadOnly" 
            JsEdgePathFunctionName="EdgePathFunc" 
            OnCanvasLoaded="OnLoaded" 
            OnSocketLongPress="HandleSocketLongPress"
            OnContextMenu="HandleContextMenu">
    <BackgroundContent>
        <FlowBackground class="flow-grid-lines"/>
    </BackgroundContent>
    <Panels>
        <FlowPanels>
            <div class="panel-group">
                <!-- Zoom controls -->
                <button class="panel-btn" title="Zoom In" @onclick="ZoomIn">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M8 3V13M3 8H13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                </button>
                <button class="panel-btn" title="Zoom Out" @onclick="ZoomOut">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M3 8H13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                </button>
                <button class="panel-btn" title="Reset View" @onclick="ResetView">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M14 8C14 8 12 4 8 4C4 4 2 8 2 8M8 4V1M8 4L5 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
                <div class="zoom-level">@($"{currentZoom:P0}")</div>
            </div>
        </FlowPanels>
    </Panels>
</FlowCanvas>

<FlowContextMenu @ref="contextMenu"
                 Graph="graph" />



@code
{
    FlowGraph graph = new FlowGraph();
    FlowCanvas? canvas;
    FlowContextMenu? contextMenu;
    private string data="{}";
    private bool isReadOnly = false;
    private double currentZoom = 1.0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        graph.RegisterNode<WaveParametersNode>();
        graph.RegisterNode<ColorGradientNode>();
        graph.RegisterNode<OceanWaveRendererNode>();
    }
    private NodeInfo? fromNodeInfo,toNodeInfo;

    private async Task OnLoaded()
    {
        await Runtime.InvokeAsync<IJSObjectReference>("import","/_content/SharedNodesLibrary/graphLine.js");

        // Create ocean wave visualization system
        
        // Wave parameters controller
        fromNodeInfo = await graph.CreateNodeAsync<WaveParametersNode>(100, 10, []);
        
        // Color gradient controller
        toNodeInfo = await graph.CreateNodeAsync<ColorGradientNode>(300, 300, []);
        
        // Wave renderer with animated preview
        var rendererNode = await graph.CreateNodeAsync<OceanWaveRendererNode>(900, 40, []);

        await Task.Delay(100);

        // Connect wave parameters to renderer
        await graph.ConnectAsync(fromNodeInfo.Id, rendererNode.Id, "WaveConfig", "WaveConfig");
        
        // Connect color gradient to renderer
        await graph.ConnectAsync(toNodeInfo.Id, rendererNode.Id, "GradientConfig", "GradientConfig");
    }


    private async Task SaveGraph()
    {
        data = await graph.SerializeAsync();
    }

    private async Task ClearGraph()
    {
        await graph.ClearAsync();
    }

    private async Task LoadGraph()
    {
        await graph.DeserializeAsync(data);
    }

    private async Task ExecuteGraph()
    {
        await graph.ExecuteAsync();
    }
    
    private async Task ToggleReadOnly()
    {
        isReadOnly = !isReadOnly;
        if (canvas != null)
        {
            await canvas.SetReadOnlyAsync(isReadOnly);
        }
    }
    
    
    private void HandleSocketLongPress(SocketLongPressEventArgs e)
    {
        Debug.WriteLine($"Socket: {e.Socket.Name}, X: {e.X}, Y: {e.Y}");
    }
    
    private async Task HandleContextMenu(CanvasContextMenuEventArgs e)
    {
        if (contextMenu != null)
        {
            // Pass both screen coords (for menu positioning) and canvas coords (for node creation)
            await contextMenu.ShowAsync(e.ClientX, e.ClientY, e.X, e.Y);
        }
    }

    private async Task Undo()
    {
        await graph.CommandManager.UndoAsync();
    }

    private async Task Redo()
    {
        await graph.CommandManager.RedoAsync();
    }
    
    private async Task ZoomIn()
    {
        if (canvas == null) return;
        
        var props = await canvas.GetViewportPropertiesAsync();
        var newZoom = Math.Min(props.MaxZoom, props.Zoom + 0.1);
        await canvas.SetZoomAsync(newZoom);
        currentZoom = newZoom;
    }
    
    private async Task ZoomOut()
    {
        if (canvas == null) return;
        
        var props = await canvas.GetViewportPropertiesAsync();
        var newZoom = Math.Max(props.MinZoom, props.Zoom - 0.1);
        await canvas.SetZoomAsync(newZoom);
        currentZoom = newZoom;
    }
    
    private async Task ResetView()
    {
        if (canvas == null) return;
        
        await canvas.SetViewportPropertiesAsync(new FlowState.Models.Serializable.CanvasProperties 
        { 
            Zoom = 1.0, 
            OffsetX = 0, 
            OffsetY = 0,
            MinZoom = canvas.MinZoom,
            MaxZoom = canvas.MaxZoom
        });
        currentZoom = 1.0;
    }
}


<style>

.flow-node.selected {
    box-shadow:
            0 8px 32px rgba(2, 6, 23, 0.6),
            0 0 0 2px rgba(124, 58, 237, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.05);
    border-color: #e3ec3d;
}


.flow-node .title { 
  font-weight: 600; 
  font-size: 14px; 
  color: white;
  padding: 12px 16px 8px;
  background: rgb(88, 87, 87);
}

.flow-node .body { 
  font-size: 13px; 
  color: #cbd5e1;
  padding: 12px 16px;
  background: rgb(88, 87, 87);
}


.flow-node {
  position: absolute;
  min-width: 160px;
  border-radius: 4px;
  background: rgb(51, 51, 51);
  border: 1px solid rgba(255,255,255,0.05);
  box-shadow: 
    0 4px 16px rgba(2,6,23,0.6),
    inset 0 1px 0 rgba(255,255,255,0.05);
  transform-origin: 0 0;
  user-select: none;
  cursor: grab;
  z-index: 10; /* Default z-index for regular nodes */
  
  /* PERFORMANCE OPTIMIZATIONS */
  /* GPU acceleration with proper text rendering */
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  
  /* Text rendering optimizations - prevents blur during zoom */
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
  text-rendering: geometricPrecision;
  
  /* Force subpixel precision for crisp text at any zoom level */
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-perspective: 1000;
  perspective: 1000;
  
  /* CSS containment for better rendering performance */
  contain: layout style paint;
  
  /* Prevent layout thrashing */
  isolation: isolate;
}

/* Group nodes should be behind edges and regular nodes */
.flow-node[kind="Group"] {
    z-index: 1 !important;
}



.flow-grid-lines
{
    background: #252525;
  background-size: 
    100px 100px;
  background-position: 
    0 0;
}

/* Input box styles */
.input-box {
  width: 90%;
  padding: 6px 8px;
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 6px;
  background: rgba(255,255,255,0.05);
  color: #fff;
  font-size: 12px;
  outline: none;
  transition: all 0.2s ease;
  margin: 4px 0;
  pointer-events: auto;
  cursor: text;
}

:deep .input-box:focus {
  border-color: var(--fg-accent);
  background: rgba(255,255,255,0.1);
}

.input-box::placeholder {
  color: rgba(255,255,255,0.5);
}
.title-container {
    position: relative;
}

/* Panel Controls */
.panels {
    position: absolute;
    top: 20px;
    right: 20px;
    z-index: 1000;
    pointer-events: none;
}

.panel-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    background: rgba(30, 30, 30, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 8px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    pointer-events: auto;
}

.panel-btn {
    width: 40px;
    height: 40px;
    background: rgba(60, 60, 60, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    color: #ffffff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    padding: 0;
}

.panel-btn:hover {
    background: rgba(80, 80, 80, 0.9);
    border-color: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
}

.panel-btn:active {
    transform: scale(0.95);
}

.panel-btn svg {
    pointer-events: none;
}

.zoom-level {
    text-align: center;
    font-size: 12px;
    font-weight: 600;
    color: #ffffff;
    padding: 8px 4px;
    background: rgba(40, 40, 40, 0.8);
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.05);
    min-width: 40px;
}

</style>
