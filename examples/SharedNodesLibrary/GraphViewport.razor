@using FlowState.Components
@using FlowState.Models
@using System.Threading.Tasks
@using FlowState.Models.Events
@using SharedNodesLibrary
@using SharedNodesLibrary.Nodes
@using System.Text.RegularExpressions
@using System.Diagnostics

<GraphToolbar OnSave="SaveGraph" 
              OnClear="ClearGraph" 
              OnLoad="LoadGraph" 
              OnExecute="ExecuteGraph" 
              OnToggleReadOnly="ToggleReadOnly"
              OnUndo="Undo"
              OnRedo="Redo"
              IsReadOnly="isReadOnly" />

<FlowCanvas @ref="canvas" 
            Height="calc(100vh - 60px)" 
            Width="100vw" 
            Graph="graph" 
            IsReadOnly="isReadOnly" 
            OnCanvasLoaded="OnLoaded" 
            OnSocketLongPress="HandleSocketLongPress"
            OnContextMenu="HandleContextMenu">
    <BackgroundContent>
        <FlowBackground class="flow-grid-lines"/>
    </BackgroundContent>
</FlowCanvas>

<FlowContextMenu @ref="contextMenu"
                 Graph="graph" />



@code
{
    FlowGraph graph = new FlowGraph();
    FlowCanvas? canvas;
    FlowContextMenu? contextMenu;
    private string data="{}";
    private bool isReadOnly = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        graph.RegisterNode<InputNode>();
        graph.RegisterNode<IfElseNode>();
        graph.RegisterNode<SumNode>();
        graph.RegisterNode<WatchNode>();
        graph.RegisterNode<GroupNode>();
    }
    private async Task OnLoaded()
    {

        graph.TypeCompatibiltyRegistry.Register<float>(typeof(int));
        
        // Create flow: Sum two inputs, compare with threshold, display result
        
        // Two input nodes for Sum
        var fromNodeInfo = await graph.CreateNodeAsync<InputNode>(50, 80, []);
        var toNodeInfo = await graph.CreateNodeAsync<InputNode>(50, 220, []);
        
        // Sum node
        var sumNode = await graph.CreateNodeAsync<SumNode>(350, 150, []);
        
        // Threshold input for comparison
        var thresholdNode = await graph.CreateNodeAsync<InputNode>(350, 320, []);
        
        // If-Else comparison node
        var ifElseNode = await graph.CreateNodeAsync<IfElseNode>(650, 200, []);
        
        // Watch nodes for true and false paths
        var watchTrue = await graph.CreateNodeAsync<WatchNode>(950, 120, []);
        var watchFalse = await graph.CreateNodeAsync<WatchNode>(950, 280, []);

        await Task.Delay(100);

        // Connect: Input1 + Input2 -> Sum
        await graph.ConnectAsync(fromNodeInfo.Id, sumNode.Id, "Output", "InputA");
        await graph.ConnectAsync(toNodeInfo.Id, sumNode.Id, "Output", "InputB");
        
        // Connect: Sum result -> IfElse InputA (value to compare)
        await graph.ConnectAsync(sumNode.Id, ifElseNode.Id, "Output", "InputA");
        
        // Connect: Threshold -> IfElse InputB (compare against this)
        await graph.ConnectAsync(thresholdNode.Id, ifElseNode.Id, "Output", "InputB");
        
        // Connect: IfElse True path -> Watch (when condition is true)
        await graph.ConnectAsync(ifElseNode.Id, watchTrue.Id, "OutputTrue", "Input");
        
        // Connect: IfElse False path -> Watch (when condition is false)
        await graph.ConnectAsync(ifElseNode.Id, watchFalse.Id, "OutputFalse", "Input"); 
    }


    private async Task SaveGraph()
    {
        data = await graph.SerializeAsync();
    }

    private async Task ClearGraph()
    {
        await graph.ClearAsync();
    }

    private async Task LoadGraph()
    {
        await graph.DeserializeAsync(data);
    }

    private async Task ExecuteGraph()
    {
        await graph.ExecuteAsync();
    }
    
    private async Task ToggleReadOnly()
    {
        isReadOnly = !isReadOnly;
        if (canvas != null)
        {
            await canvas.SetReadOnlyAsync(isReadOnly);
        }
    }
    
    
    private void HandleSocketLongPress(SocketLongPressEventArgs e)
    {
        Debug.WriteLine($"Socket: {e.Socket.Name}, X: {e.X}, Y: {e.Y}");
    }
    
    private async Task HandleContextMenu(CanvasContextMenuEventArgs e)
    {
        if (contextMenu != null)
        {
            // Pass both screen coords (for menu positioning) and canvas coords (for node creation)
            await contextMenu.ShowAsync(e.ClientX, e.ClientY, e.X, e.Y);
        }
    }

    private async Task Undo()
    {
        await graph.CommandManager.UndoAsync();
    }

    private async Task Redo()
    {
        await graph.CommandManager.RedoAsync();
    }
}


<style>
.flow-node .title { 
  font-weight: 600; 
  font-size: 14px; 
  margin-bottom: 8px; 
  color: white;
  padding: 12px 16px 8px;
  background: linear-gradient(90deg, rgba(124,58,237,0.1), transparent);
  border-bottom: 1px solid rgba(255,255,255,0.05);
  border-radius: 12px 12px 0 0;
}

.flow-node .body { 
  font-size: 13px; 
  color: #cbd5e1;
  padding: 12px 16px;
}


.flow-node {
  position: absolute;
  min-width: 160px;
  border-radius: 12px;
  background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));
  border: 1px solid rgba(255,255,255,0.05);
  box-shadow: 
    0 8px 32px rgba(2,6,23,0.6),
    inset 0 1px 0 rgba(255,255,255,0.05);
  transform-origin: 0 0;
  user-select: none;
  cursor: grab;
  backdrop-filter: blur(8px);
  z-index: 10; /* Default z-index for regular nodes */
  
  /* PERFORMANCE OPTIMIZATIONS */
  /* GPU acceleration with proper text rendering */
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  
  /* Text rendering optimizations - prevents blur during zoom */
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
  text-rendering: geometricPrecision;
  
  /* Force subpixel precision for crisp text at any zoom level */
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-perspective: 1000;
  perspective: 1000;
  
  /* CSS containment for better rendering performance */
  contain: layout style paint;
  
  /* Prevent layout thrashing */
  isolation: isolate;
}

/* Group nodes should be behind edges and regular nodes */
.flow-node[kind="Group"] {
    z-index: 1 !important;
}



.flow-grid-lines
{
    background: #111827;
    background-image: 
    /* Main grid lines */
    linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px),
    /* Minor grid lines */
    linear-gradient(rgba(255,255,255,0.05) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255,255,255,0.05) 1px, transparent 1px);
  background-size: 
    100px 100px,
    100px 100px,
    20px 20px,
    20px 20px;
  background-position: 
    0 0,        /* Main grid */
    0 0,        /* Main grid */
    0 0,        /* Minor grid */
    0 0;        /* Minor grid */
}

/* Input box styles */
.input-box {
  width: 90%;
  padding: 6px 8px;
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 6px;
  background: rgba(255,255,255,0.05);
  color: #fff;
  font-size: 12px;
  outline: none;
  transition: all 0.2s ease;
  margin: 4px 0;
  pointer-events: auto;
  cursor: text;
}

:deep .input-box:focus {
  border-color: var(--fg-accent);
  background: rgba(255,255,255,0.1);
}

.input-box::placeholder {
  color: rgba(255,255,255,0.5);
}
.title-container {
    position: relative;
}

.execution-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: rgba(255, 255, 255, 0.1);
    overflow: hidden;
}

.execution-progress::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: linear-gradient(90deg, 
        transparent 0%, 
        #4CAF50 25%, 
        #8BC34A 50%, 
        #4CAF50 75%, 
        transparent 100%);
    animation: progress-slide 1.5s ease-in-out infinite;
}

@@keyframes progress-slide {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

</style>
