@using Microsoft.JSInterop
<div class="flow-node" id="@Node?.Id" @ref="nodeRef">
    @ChildContent
</div>


@code
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public FlowNodeBase? Node { get; set; } //get the actual base node

    internal ElementReference nodeRef;

    #nullable disable
    [Inject]
    public IJSRuntime JS { get; set; }
    internal static IJSObjectReference JSModule;

#nullable restore

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(!firstRender)
            return;

        if(JSModule==null)
        {
            JSModule = await JS.InvokeAsync<IJSObjectReference>("import", "/_content/FlowState/flowNode.js");
        }

        Node.DomElement =  this;
        await MoveNodeAsync(Node.X, Node.Y);

    }

    public ValueTask MoveNodeAsync(double x, double y)
    {
        if (JSModule!=null)
            return JSModule.InvokeVoidAsync("moveNode", nodeRef, x, y);
            
        return ValueTask.CompletedTask;
    }
    public ValueTask<DomPoint> GetTransformPositionAsync()
    {
        if(JSModule==null)
        {
            return JSModule.InvokeAsync<DomPoint>("getTransformPosition",nodeRef);
        }

        return ValueTask.FromResult(new DomPoint());
    }

}
<style>
    .flow-node.selected {
        box-shadow:
            0 8px 32px rgba(2, 6, 23, 0.6),
            0 0 0 2px rgba(124, 58, 237, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.05);
        border-color: #7c3aed;
    }
</style>